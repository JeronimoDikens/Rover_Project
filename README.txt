Задача: 
Необходимо реализовать класс Rover, проектирующий путь ровера по местности на следующим правилам:

Местность
Местность передается в закодированном виде: фотография, сконвертированная в матрицу с числами. Одна матрица — это прямоугольный снимок размером х на y метров. Вот пример одной такой сконвертированной фотографии, на ней снимок в 100 на 100 метров:
Фото 1: 
0 2 3 4 1
2 3 4 4 1
3 4 5 6 2
4 5 6 7 1
6 7 8 7 1
Числа показывают высоту над уровнем моря. 0 — это высота ровно на уровне моря, а, например, 4 — это 4 единицы над уровнем моря. На Фото 1 закодирован холм, пологий слева и резко обрывающийся справа.
Небольшой холмик выглядел бы вот так
Фото 2: 
0 1 1 1 0
1 1 3 1 1
0 1 1 1 0
0 0 0 0 0
А вот так: ложбина между двумя холмами
Фото 3: 
1 1 2 3 4
1 0 1 2 3
2 1 1 1 2
3 3 1 0 1
4 3 1 1 0
На этих данных - скала или овраг, так как виден очень резкий перепад высот в середине снимка
Фото 4: 
1 1 6 7 7
1 1 6 7 8
1 6 7 8 9
А на этом - маленькая ямка 
Фото 5: 
3 4 4 4 4 3
3 2 1 1 1 4
4 2 1 1 3 4
4 4 2 2 3 4
Данные придут вам в виде матрицы с неотрицательными числами. Размер матрицы NxM.

Ровер
Ровер всегда движется из верхней левой точки [0][0] в правую нижнюю точку [N - 1][M - 1], где N и M - это длина и ширина матрицы. Это надо для того, чтобы разрезать фотографию на одинаковые куски, обработать их по-отдельности, а потом склеить весь путь.
У вашего ровера есть несколько ограничений:

Движение
Из любой точки ровер может двигаться только в четыре стороны: на север, юг, запад, восток. Ровер не может ехать по-диагонали — эта функция еще не реализована. Ровер не может вернуться в ту точку, в которой уже был.
Заряд
Ровер тратит единицу заряда на само движение, и дополнительные единицы на подъем и спуск пропорциональный сложности подъема или спуска. Сложность подъема или спуска - это разница между высотами.  

Вам надо рассчитать путь ровера из верхей левой [0][0] точки в правую нижнюю [N - 1][M - 1] точку с минимальной тратой заряда.
Вы не заранее знаете размер фотографии, которую будете обрабатывать, N и M - произвольные неотрицательные числа.

План
Сделайте план пути и планируемый расход в txt файле. Назовите файл path-plan.txt
Для фотографии
0 4
1 3
план будет такой:
path-plan.txt
[0][0]->[1][0]->[1][1]
steps: 2
fuel: 5
Ровер едет из 0 в 1 в 3, сделает два шага, потратит 5 заряда. Если бы он поехал сначала в 4, потом в 3, он бы сделал то же количество шагов, но потратил бы 7 заряда. Оптимальный путь: 2 шага и 5 заряда.
Если на карте есть несколько вариантов пути, выберите любой из них.

Rover v.2. Update of the project

Новые функции: 
Карта передается в виде строкового массива;
Проверять корректность ввода карты, если данные неверны работа программы невозможна;
Добавлена функция движения по диагонали;
Появились недостижимые участки, куда ровер не может попасть;
Появился уровень ниже уровня моря, ровер может там передвигаться